{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "232dfb40-518c-4b1b-91fd-9a8468c944de",
   "metadata": {},
   "source": [
    "### Lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b348b908-9d52-4893-a8d5-1251cfa15d60",
   "metadata": {},
   "outputs": [],
   "source": [
    "People = [\"Lushozi\",\"Chare\",\"Peter\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2668283-e9fb-4b07-a060-2e6e5578eb25",
   "metadata": {},
   "outputs": [],
   "source": [
    "People "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a5673f8-0e6e-4a0e-9e6f-3cf41a036097",
   "metadata": {},
   "outputs": [],
   "source": [
    "People [0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4c13b1a-c678-4164-9385-0cacb4a88a46",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = [6,7,8,7]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "214f9159-ee55-497e-8e31-ffc476fb97c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba25519e-24e3-45e5-bc67-89ea544ca80b",
   "metadata": {},
   "source": [
    "### Tuple Data Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a76d4e3d-5a7d-4849-9945-a8892d0f748b",
   "metadata": {},
   "outputs": [],
   "source": [
    "products = (\"TV\",\"Radiio\",\"Software\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94a1ee02-a5e2-4953-b384-67bfda1840fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "products"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "f1138942-b835-440c-b357-5adbf0bcc48d",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'products' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[90], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m products[\u001b[38;5;241m0\u001b[39m]\n",
      "\u001b[1;31mNameError\u001b[0m: name 'products' is not defined"
     ]
    }
   ],
   "source": [
    "products[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "1e377e90-d1ea-4105-8be4-f38094b76481",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Software'"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "products[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0217dc4e-44b6-4efc-b58a-823fa7066696",
   "metadata": {},
   "source": [
    "### String Data Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3929d19f-4c09-41e3-857c-5232b50b60ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "name = 'Peter'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a69a0ed8-5480-43ce-8649-d7273ba2b915",
   "metadata": {},
   "outputs": [],
   "source": [
    "name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e95578a4-8cc7-46e2-9b95-993f57b7a33b",
   "metadata": {},
   "outputs": [],
   "source": [
    "surname = \"Johns\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70a473af-2324-4278-b175-28dd7c04d58f",
   "metadata": {},
   "outputs": [],
   "source": [
    "surname"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bffa3858-8775-4adf-bdb5-bdf5260744b4",
   "metadata": {},
   "source": [
    "### Set Data Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "505f7261-8565-42fe-a5d3-64ad155b479d",
   "metadata": {},
   "outputs": [],
   "source": [
    "myset = {5,6,8,9,10}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "99f0dc8e-5d26-4bb7-9e47-81b0c5a716e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "myset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63af98bb-9e86-4f83-9d30-e689ded25aa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "stringset = {'Peter','John','Allan'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d692bfe8-8a35-46b2-94c7-c111f134fa5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "stringset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cb4f7f9-2b15-42b6-8e5c-dcadd81fabef",
   "metadata": {},
   "source": [
    "### Data Input/Output in Python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b41472a9-fc5b-448c-bdb0-fbf13700ebb8",
   "metadata": {},
   "source": [
    "Age = input(\"Please enter your age: \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "769bb99c-3b4e-4b10-83f7-210a40a048c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Name = input(\"Please enter name: \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c6bfaf7-74a2-4104-8ff1-cf81ef39e524",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98cf54f5-9737-45d4-b0ea-f0684006f29b",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Your name is : \", Name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f39015fd-e103-4b8d-b52c-8a2fcecd82a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Your name is : \"+ Name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f433d53a-c90f-416a-be99-3de5372c7cc5",
   "metadata": {},
   "source": [
    "### Exercise 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fb12e9e-3fee-49c2-9f92-b9ac3ef0e3d5",
   "metadata": {},
   "source": [
    "1. write a program to accept two integers from the input console and find thier product. Display the answer with a comment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9baba534-ec9b-4bb9-8502-4d25b679f278",
   "metadata": {},
   "outputs": [],
   "source": [
    "Number1 = int(input(\"Enter first integer:\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ec51d81-6a40-4ba0-a0b2-d08653328803",
   "metadata": {},
   "outputs": [],
   "source": [
    "Number2 = int(input(\"Enter second interger:\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f16e7de-6e96-44b3-aae4-5d10e0625cb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\" The product ot the two integers is: \", Number1* Number2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe0b8103-cf74-4499-b363-f5a84c298331",
   "metadata": {},
   "source": [
    "#### 2. Write a simple program to accept the sides of a triangle and calculate the area of a triangle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a3e5961-79da-4c84-977e-bf8e8175e6ee",
   "metadata": {},
   "source": [
    "Formula Hint Area = 1/2Base*Height"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebd5b0f5-8058-4b80-a575-7c57c96a253e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Accept the Base and Height\n",
    "Base = float(input(\" Enter the base of the triangle\"))\n",
    "Height = float(input(\" Ener the height of the triangle\"))\n",
    "\n",
    "#calculate the area of the triangle\n",
    "area =0.5 * Base * Height\n",
    "\n",
    "#Display the result\n",
    "print(\"The area of the triangle with base and height is: \", area)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2effc8e2-a8c0-4432-a91c-82f8d76653c9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "9a6e841a-18ef-4438-b39d-9228864b743e",
   "metadata": {},
   "source": [
    "### 3. Write a program that prompt the user to enter two values a and b and swap the variables. The value in variable a should be put variable b and the value in variable b be put in variable a. Display the swapped varriables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "462fa078-0b15-4caa-a3d0-f266b2298629",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = int(input(\"Enter firtst value\"))\n",
    "b = int(input(\"Enter second value\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f51772a-d8c3-42d8-842b-320e652b3d76",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = a\n",
    "a = b\n",
    "b = c\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e70b104f-887b-4aca-965d-48492b2d687d",
   "metadata": {},
   "source": [
    "### 4. Write a program to calculate the perimeter of a rectangle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee3210d0-ddf1-4ea7-b33c-74037c4008de",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = int(input(\"enter the length:\"))\n",
    "b = int(input(\"enter the width:\"))\n",
    "p = (2*a) + (2*b)\n",
    "print(\"Perimeter is :\",p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d656aee-9a30-4052-9f43-a9c588eecb7d",
   "metadata": {},
   "source": [
    "### 5. Write a program to accept the name and age of a person. Display the person's entered details in one print statement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dec2821d-15ef-48d4-9de6-85222725c369",
   "metadata": {},
   "outputs": [],
   "source": [
    "######e.g name is Peter and age is 30\n",
    "name = input(\"Enter the name\")\n",
    "age = int(input(\"Enter the age\"))\n",
    "print(\"Your name is\",name,\"and your age is\",age)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a336b985-1361-414a-85f8-c996e62dc632",
   "metadata": {},
   "source": [
    "## Arithmetic Practice Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96d3270d-2e2b-470b-8b2e-7339facd0c3a",
   "metadata": {},
   "source": [
    "#### 1. How many seconds are in a 42 minutes and 42 seconds?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98d099cd-c7fc-4cd2-8e53-e33e89009b8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Set variables\n",
    "seconds = 42\n",
    "minutes = 42\n",
    "print (\"Total seconds \",60*42+42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59d27e13-8e15-4170-98a9-42ae963a58ba",
   "metadata": {},
   "source": [
    "#### 2. How many miles are there in 100 kilometers?\n",
    "#### Hint: 1mile = 1.61KM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d047ca38-ce65-402c-b8b9-773db1ceb5c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "mile = 1.61\n",
    "kilometers =100\n",
    "\n",
    "total_miles = kilometers/mile\n",
    "print(total_miles)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "439541cc-0b02-4e0d-9ce8-80d38849d056",
   "metadata": {},
   "source": [
    "#### 3. if you run a 10 KM race in 42 minutes 42 seconds, what is your average pace in seconds per mile?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c913212-fa58-415c-8504-a938226edadf",
   "metadata": {},
   "outputs": [],
   "source": [
    "miles = 10/1.61\n",
    "seconds = 42*60+42\n",
    "print(\"Pace in seconds per mile is\", seconds/miles)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcb9bee3-6a79-4e19-90b6-bf7d95eca12b",
   "metadata": {},
   "source": [
    "#### 4. What is your average pace in minutes and seconds per mile?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3f6322f-d72d-43cb-8b1d-608a96a72902",
   "metadata": {},
   "outputs": [],
   "source": [
    "minutes =(42*60+42)/60\n",
    "average_minutes = minutes/miles\n",
    "average_seconds =0.8747*60\n",
    "print(\"Average pace in minutes per mile is \", int(average_minutes),\"minutes and\", int(average_seconds),\"seconds\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b27461b5-64a0-4c8d-997c-4e1376585679",
   "metadata": {},
   "source": [
    "#### 5. What is your average speed in miles per hour?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "228a7685-ff7d-4710-8c37-2e6c4b76a26f",
   "metadata": {},
   "outputs": [],
   "source": [
    "speed = (10/1.61)/(minutes/60)\n",
    "print(\"The speed in miles per hour is\",speed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "449ed9c4-2624-4348-b155-bd4f6f78c1ff",
   "metadata": {},
   "source": [
    "#### 6. Accept two integers and determine the larger of the two numbers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e8b2096-ae39-4099-bf3e-e33c014b4a00",
   "metadata": {},
   "outputs": [],
   "source": [
    "num1 = int(input(\"Enter first number\"))\n",
    "num2 = int(input(\"Enter second numer\"))\n",
    "if (num1 > num2):\n",
    "          print(num1,\"is larger\")\n",
    "else: print(num2, \"is larger\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48e94039-4ece-4c60-a225-3dc349445153",
   "metadata": {},
   "outputs": [],
   "source": [
    "p = int(input(\"Enter Principal amount\"))\n",
    "r = float(input(\"Enter interest rate\"))\n",
    "n = int(input(\"Enter number of times\"))\n",
    "t = int(input(\"Enter time the money invested\"))\n",
    "print(\"The amount of money accumulated after n years A=\",p*(1+(r/n))**n*t)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86f81a13-4e04-47e9-8535-eeba69882dd5",
   "metadata": {},
   "source": [
    "## IF Statement in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea1a0978-c9fe-47f8-8f29-db533236799a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#if <condition>:\n",
    "#    <action(s)>\n",
    "a = 8\n",
    "b = 6\n",
    "if a > b:\n",
    "    print(\"a is larger than b\")\n",
    "    print(\"b is smaller than a\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9de545ec-af37-436b-ba2a-42d0bc2144b1",
   "metadata": {},
   "source": [
    "### IF-ELSE Statement in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebaac474-3ec4-4c92-88f2-f70aac98e304",
   "metadata": {},
   "outputs": [],
   "source": [
    "# if <condition>:\n",
    "#     <action(s)>\n",
    "#   else:\n",
    "#     <action(s)>\n",
    "a = 9\n",
    "b =12\n",
    "if a > b:\n",
    "    print(\"a is larger than b\")\n",
    "else:\n",
    "    print(\"I an not sure, test again\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a33aba7-c2c6-486f-ac44-f176a4056c07",
   "metadata": {},
   "source": [
    "### IF -ELSE-IF Statement in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "112e7a18-7900-42fb-a050-5c5e00e3512a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#if <cindition>:\n",
    "#   <action(s)>\n",
    "#elif <condition>:\n",
    "#    <action(s)>\n",
    "#else:\n",
    "#    <actions(s)>\n",
    "a = 5\n",
    "b = 5\n",
    "if a > b:\n",
    "    print(\"a is larger than b\")\n",
    "elif b < a:\n",
    "    print(\"b is largernthan a\")\n",
    "elif a == b:\n",
    "    print(\"a and b are equal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ba92ffe-9bdc-4cac-ac9b-36f788b04d3b",
   "metadata": {},
   "source": [
    "Given a students score in an exam , grade the student according to Distinction, Credit, Pass and Fail.\n",
    "\n",
    "Distinction = 75-100, Credit =60-74, Pass =50-59 and Fail = 0-49"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b481480a-d246-433b-87e8-a6715a61ac85",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Accepting the mark as input\n",
    "mark = int(input(\"What did the student score\"))\n",
    "if mark >= 75 and mark <=100:\n",
    "    print(\"Distinction\")\n",
    "elif mark >= 60 and mark <=74:\n",
    "    print(\"Credit\")\n",
    "elif mark >=50 and mark <=59:\n",
    "    print(\"Pass\")\n",
    "elif mark >=0 and mark <=49:\n",
    "    print(\"Student Failed\")\n",
    "else:\n",
    "    print(\"Invalid Mark\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b88cc0e-e9d7-487a-99ca-dc1552bdbdce",
   "metadata": {},
   "source": [
    "### 1. Only the citizens who are 18 years old and above are eligible to vote in an election. write a program to vet a voter based on ther age."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6745b8eb-8a6f-41fa-bc55-a6536f03e1f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Accepting the citizen age\n",
    "age = int(input(\"Enter the age of the voter\"))\n",
    "if age >= 18:\n",
    "   print (\"eligible to vote\")\n",
    "else:\n",
    "   print (\"not eligible to vote\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f9ba3d4-3f42-41ec-bb76-b07ef372f823",
   "metadata": {},
   "source": [
    "#### 2. Write a program to accept an integer and determine whether the entered number is even or odd."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba1d8c31-2736-4916-aaf1-ac2ce0b7be44",
   "metadata": {},
   "outputs": [],
   "source": [
    "num = int(input(\"Enter the even or odd number\"))\n",
    "if num%2==0:\n",
    "    print(\"even number\")\n",
    "elif num%2!=0:\n",
    "    print(\"Odd number\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5957b3d-335e-4370-9538-7f4fc3112a6f",
   "metadata": {},
   "source": [
    "#### 3. Accept 3 sides of a triangle a,b and c. Detertimine whether the triangle is Equilateral (All sides equal), Isosceles(2 sides equal)or Obtuse (All side not equal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a14015f-8557-4805-b904-7036a73095e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Accept 3 sides of a triangle\n",
    "a= int(input(\"Enter side A\"))\n",
    "b = int(input(\"Enter side B\"))\n",
    "c = int(input(\"Enter side C\"))\n",
    "if a==b==c:\n",
    "    print(\"Equilateral triangle\")\n",
    "elif a==b or a==c or b==c:\n",
    "    print(\"Isosceles\")\n",
    "else: print (\"obtuse triangle\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e6fedbd-caf3-4f61-bfea-97e4fe8f57bc",
   "metadata": {},
   "source": [
    "### Repetitive Srtuctures in Python (Iteration/Loops)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eef86432-76cd-4836-ac57-b9201e075aeb",
   "metadata": {},
   "source": [
    "#### The While Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6402143f-8f32-43c6-947d-37247fdee4d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "while <condition>:\n",
    "    <action>\n",
    "    <increment condition variable>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cf04b620-a8c5-4981-b52c-93d85e7a6729",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "X = 0\n",
    "while X < 5:\n",
    "    print (X)\n",
    "    X+=3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a1022af-3064-43ce-a692-13b0ee39289e",
   "metadata": {},
   "source": [
    "### The For Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b48c887-c8d6-432a-bc73-f0a9c36bbf94",
   "metadata": {},
   "outputs": [],
   "source": [
    "for <control variable> in <data structure>:\n",
    "<action(s)>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf96c3f7-4742-4302-9d84-f8404a56c10f",
   "metadata": {},
   "outputs": [],
   "source": [
    "name = \"Sipho\"\n",
    "for x in name:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e43a451-1c37-4054-9e5c-9ee0a276e81e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alex\n"
     ]
    }
   ],
   "source": [
    "names =[\"Siphop\",\"Alex\",\"Mlondi\",\"Peter\"]\n",
    "for x in names:\n",
    "    if x == \"Alex\":\n",
    "        print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a128dba5-6fc6-4dde-bb97-a7571b5dc05b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 "
     ]
    }
   ],
   "source": [
    "## printing the 0dd numbers between 1 and 100 (Use the while loop)\n",
    "x = 1\n",
    "while x <=100:\n",
    "    if x%2 == 1:\n",
    "        print(x, end=\" \")\n",
    "    x+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8018a4a9-6bcc-4e3d-8368-61064898b57f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 "
     ]
    }
   ],
   "source": [
    "for i in range (5,100):\n",
    "    if i%2== 1:\n",
    "        print(i, end= \" \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7ec247c0-0664-457f-9d44-20c8fbe0c3e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(1, 10, 2)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#range(initialvalue, finalvalue, increamentor)\n",
    "range(1,10,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c2b9f969-bf6e-4e9b-a531-ddbb17739099",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 "
     ]
    }
   ],
   "source": [
    "i=0\n",
    "while i<=100:\n",
    "    print(i, end=\" \")\n",
    "    i=i+1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecc76995-3f4e-4bcd-848a-8b4a233be19a",
   "metadata": {},
   "source": [
    "### calculate the sum of all integers from q to any given number\n",
    "\n",
    "e.g Given 5, add 1+2+3+4+5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "68cc9c20-8716-4dce-8fd5-f3abf9067638",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number: 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of the values from 1 to the entered number is 15\n"
     ]
    }
   ],
   "source": [
    "num = int(input(\"Enter the number:\"))\n",
    "sum =0\n",
    "for i in range(1, num+1):\n",
    "    sum = sum+i\n",
    "print(\"The sum of the values from 1 to the entered number is\", sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dee2df02-0208-4a17-94e4-b7a652f60383",
   "metadata": {},
   "source": [
    "# 17.10.24"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9def3618-48d6-4e43-81df-563f056904d6",
   "metadata": {},
   "source": [
    "#### Write a Python program to count the total  number of digit in a number. (Use while loop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "87d830aa-291e-4c56-863c-83bc961a5f86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"Enter the number\"))\n",
    "count = 0\n",
    "if number ==0:\n",
    "   count=1\n",
    "else:\n",
    "   while number !=0:\n",
    "      number = number//10\n",
    "      count +=1\n",
    "print(count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b62f2fa-8c54-4479-b135-07313a65c845",
   "metadata": {},
   "source": [
    "### Write a program to create a list and print the list in reverse order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "9e97e773-8ad8-4cb1-aae0-0c63b79fb0a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Anele', 'Lungile', 'Lungelo']\n"
     ]
    }
   ],
   "source": [
    "name = 'Lungelo','Lungile','Anele'\n",
    "revname = reversed(name)\n",
    "print(list(revname))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "144ff19e-2355-4cb5-b5a6-31f0d658c766",
   "metadata": {},
   "source": [
    "#### Write a Python program to display the following number pattern. \n",
    "\n",
    "hint: Use 2 for loops, one for rowws and the other taking care of the printing.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "2ef5e7f9-fbf7-4745-a270-0dbdf309f7fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 \n",
      "1 2 \n",
      "1 2 3 \n",
      "1 2 3 4 \n",
      "1 2 3 4 5 \n"
     ]
    }
   ],
   "source": [
    "for p in range (1,5+1):\n",
    " for i in range (1,p+1):\n",
    "    print (i, end=\" \")\n",
    " print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7d5f7c7-97e0-46bc-a6ea-28d9040b5405",
   "metadata": {},
   "source": [
    "#### Write a Python program to ctreate a tuple with different data types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "5c9e5e09-e4df-4baf-97e0-947cfa877b5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sanelisiwe', 20, 0.23, True)\n"
     ]
    }
   ],
   "source": [
    "Mytuple = (\"Sanelisiwe\", 20,0.23, True)\n",
    "print(Mytuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd63e7bb-dfaa-4a3d-a3a8-20e80992cf5b",
   "metadata": {},
   "source": [
    "####  Write a Python programe to unpack a tuple into several variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "fd9a4cfa-7324-4b29-a35e-4fc97f050821",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Sanelisiwe', 25, 7)\n"
     ]
    }
   ],
   "source": [
    "name = 'Sanelisiwe'\n",
    "age = 25\n",
    "level =7\n",
    "tuple = (name, age, level)\n",
    "print(tuple)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e2d352a-83cc-45e2-8251-533f5956ef10",
   "metadata": {},
   "source": [
    "##### An empty set and prrint its data type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "d354b305-6046-48b5-9724-f965e323806d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'set'>\n"
     ]
    }
   ],
   "source": [
    "empytset={\" \"}\n",
    "print(type(empytset,))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "859aaa4f-db1e-4490-bf07-ea719aa1ccd0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'set'>\n"
     ]
    }
   ],
   "source": [
    "nonemptyset={\"Quella\"}\n",
    "print(type(nonemptyset))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4558713c-c48a-4e36-92bb-a4489ef64b32",
   "metadata": {},
   "source": [
    "### Given a range(start and end), write a program to print all prime numbers in that rage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9616601b-49bc-4c59-abce-65f6ce588e0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "start = int(input(\"Enter the initial value:\"))\n",
    "end = int(input(\"Enter the final value:\"))\n",
    "for num in range"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f1bba43-44e8-4427-918f-f518a98be6bb",
   "metadata": {},
   "source": [
    "#### Write a program to display intergers from -100 to -5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "5da101a9-3b17-4d07-91e4-bd76667d574c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-100 -99 -98 -97 -96 -95 -94 -93 -92 -91 -90 -89 -88 -87 -86 -85 -84 -83 -82 -81 -80 -79 -78 -77 -76 -75 -74 -73 -72 -71 -70 -69 -68 -67 -66 -65 -64 -63 -62 -61 -60 -59 -58 -57 -56 -55 -54 -53 -52 -51 -50 -49 -48 -47 -46 -45 -44 -43 -42 -41 -40 -39 -38 -37 -36 -35 -34 -33 -32 -31 -30 -29 -28 -27 -26 -25 -24 -23 -22 -21 -20 -19 -18 -17 -16 -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 "
     ]
    }
   ],
   "source": [
    "for i in  range(-100,-5--1):\n",
    " print(i, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68afede3-4dbf-48c8-b2d6-63a80e002a81",
   "metadata": {},
   "source": [
    "## .10.2024: Repetitive Structures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "66c2e94f-2bc6-4d60-b69c-dda4f84ed090",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "even_number 3 and odd number 3\n"
     ]
    }
   ],
   "source": [
    "num= [2,6,9,15,20,25]\n",
    "odd_count = 0\n",
    "even_count = 0\n",
    "for r in num:\n",
    "   if r%2 == 0:\n",
    "      even_count +=1\n",
    "   else:\n",
    "      odd_count +=1\n",
    "print (\"even_number\", even_count , \"and odd number\",odd_count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ea75641-edb7-4a59-9bd7-6d01c804942c",
   "metadata": {},
   "source": [
    "### 2 Write a Python program to accept a word and display the reversed version of the word."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "bc576aed-7f65-4f91-9d3d-06641b357b10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a word: Sanelisiwe\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "e w i s i l e n a S "
     ]
    }
   ],
   "source": [
    "name= input(\"Enter a word:\")\n",
    "for i in name[::-1]:\n",
    "    print (i, end=\" \")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2072baab-ff7b-48c4-b5bf-65cb9dc343d4",
   "metadata": {},
   "source": [
    "### 3 A Palindrome is a word that reads the same forwards and backwards. e.g madam, rotator. Write a python program to accept a word and check whether or not the word is apalindrome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "9ec65985-a359-4e05-b468-8c8fe5413090",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a word people\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "people  is not Palindrome\n"
     ]
    }
   ],
   "source": [
    "word = (input(\"Enter a word\"))\n",
    "if word == word[::-1]:\n",
    "    print(word,\"is a Palindrone\")\n",
    "else:\n",
    "        print(word,\" is not Palindrome\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c26f286e-4c82-477a-88bc-76757e09167b",
   "metadata": {},
   "source": [
    "### 4 The factorial of a number is the multiplication of all the numbers betweem 1 and the number itself. write a python program to accept a number and calculate the factorial of the number. e.g Fctorial of 5 is 5 x 4 x 3 x 2 x 1 = 120"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "id": "9aca4925-05cf-4619-ac25-3cd624c63d7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number: 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the factorial of 5 120\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"Enter number:\"))\n",
    "count = 1\n",
    "for i in range(1,number+1):\n",
    "    count*=i\n",
    "print(f\"the factorial of {number}\", count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c15be5f-1d74-4f96-8917-645aa3a8889a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
